ATS Native XML Input Specification V-dev
****************************************


.. contents:: **Table of Contents**
  :local:
  :depth: 2

  
About the Specification
#######################

ATS, and Amanzi's "native" specificiation, is an xml file following
Trilinos's Teuchos ParameterList schema.  There are only two types of
tags used -- `"Parameter`" and `"ParameterList`".  `"Parameter`"
elements consist of `"name`", `"type`", and `"value`" attributes.
`"ParameterList`" elements use the `"name`" attribute and include
subelements that are other `"ParameterList`" and `"Parameter`"
elements.

The top-most, `"main`" list is read by the code and used to provide
all information needed to run the simulation.  This input spec is
designed for the code, not necessarily for the user.  In general,
avoid writing input files from scratch, and prefer to modify existing
demos or examples.

Here we document the input spec by defining what each possible element
used by the code needs to be well posed.

Specs
=====

In many cases, the input specifies data for a particular parameterized
model, and ATS supports a number of parameterizations.  For example,
initial data might be uniform (the value is required), or linear in y
(the value and its gradient are required).  Where ATS supports a
number of parameterized models for quantity Z, the available models
will be listed by name, and then will be described in the subsequent
section.  For example, the specification for an `"X`" list might look
like:

.. _X-spec:
.. admonition:: X-spec

  * `"Y`" ``[string]`` **default_value** Documentation desribing Y.
  * `"Z`" ``[Z-spec]`` Model for Z, One of `"z1`" or `"z2`" (see below) 

Here, an `"X`" is defined by a `"Y`" and a `"Z`".  The `"Y`" is a
string parameter but the `"Z`" is given by a model (which will require
its own set of parameters).  The options for `"Z`" will then be
described seperately as a `"Z-spec`"


An example of using such a specification:

.. code-block:: xml

    <ParameterList name="X">
      <Parameter name="Y" type="string" value="hello"/>
      <ParameterList name="z2">
        <Parameter name="z2a" type="double" value="0.7"/>
        <Parameter name="z2b" type="int" value="3"/>
      </ParameterList>   
    </ParameterList>   
 

Syntax
======

* Reserved keywords and labels are `"quoted and italicized`" -- these
  labels or values of parameters in user-generated input files must
  match (using XML matching rules) the specified or allowable values.

* User-defined labels are indicated with ALL-CAPS, and are meant to
  represent a typical or default name given by a user - these can be
  names or numbers or whatever serves best the organization of the
  user input data.  Things liked PRESSURE or SURFACE-PONDED_DEPTH can
  be renamed from their defaults if it makes sense to the problem.

* Bold values are default values, and are used if the Parameter
  is not provided.

Naming
======

Variables are named according to a very strong convention.  While some
variables may be overridden by the user, users should choose to follow
these conventions or things like visualization scripts may not behave
as expected.

A variable name looks like one of:

- SUFFIX
- DOMAIN-SUFFIX
- DOMAIN_SET:ID-VARNAME

where:

- When DOMAIN is supplied, it is the "default" mesh, called `"domain`"
  in the mesh list, and otherwise is the name of the mesh (e.g. `"surface`").
- DOMAIN_SET:ID is itself a DOMAIN, where the set defines the
  collection as a whole (from the mesh list) and the ID is defined by
  an index across the collection, e.g. `"column:4`"

Tags indicate the use of a variable at a specific time in the
discretized time interval.  Default tags include `"current`" and
`"next`" indicating the variable at the beginning and end of the
interval, respectively.  Often subcycling and other schemes will
designate special-purpose tags which may be used internally by a
subset of the equations begin solved.  Tags are combined with
variables to indicate a specific data structure,
e.g. `"surface-pressure@NEXT`".

Lastly, derivatives are named using the `"d`" and the `"|`" character,
e.g. `"dsurface-water_content|dsurface-pressure`" is the derivative of
the `"water_content`" variable on the `"surface`" domain with respect
to the `"pressure`" on the same domain.

As a result of these conventions, none of the above individual strings,
(suffixes, domains, domain sets, or IDs) can contain any of the
following reserved characters: `:`, `-`, `|`, `@`.
  

Symbol Index
============

.. include:: symbol_table.rst
  
Main
####
{ ats_driver }
  

Mesh
####
{ ats_mesh_factory }


Region
######
{ Region }

.. contents:: **Region Types**
   :local:


All
===
{ RegionAll }

Box
===
{ RegionBox }

Plane
=====
{ RegionPlane }

Labeled Set
===========
{ RegionLabeledSet }

Function Color
==============
{ RegionFunctionColor }

Point
=====
{ RegionPoint }

Logical
=======
{ RegionLogical }

Polygon
=======
{ RegionPolygon}

Enumerated
==========
{ RegionEnumerated }

Boundary
========
{ RegionBoundary }

Box Volume Fractions
====================
{ RegionBoxVolumeFractions }

Line Segment
============
{ RegionLineSegment }


Visualization
##############
{ Visualization }


Checkpoint
##############
{ Checkpoint }  


 
Observation
##############
.. _`UnstructuredObservation`:
{ UnstructuredObservations }

.. _`Observable`:
{ Observable }


Process Kernels
###############
.. _`PK`:

Process Kernels, or PKs, are the fundamental unit of a model, and
represent a single or system of Partial Differential Equations (PDEs)
or Differential Algebraic Equations (DAEs).  PKs are broadly split
into individual equations (Physical PKs) and systems of equations,
called Multi-Process Coordinators (MPCs).

The PK tree forms the fundamental definition of the entire system of
equations to be solved by the simulator, and is represented by a
single PK or a single MPC which couples other MPCs and/or Physical
PKs.

.. contents:: **List of PKs**
   :local:

Base PKs
========
There are several types of PKs, and each PK has its own valid input
spec.  However, there are three main types of PKs, from which nearly
all PKs derive.  Note that none of these are true PKs and cannot stand
alone.

PK base class
-------------
{ PK }

PK: Physical
------------
{ pk_physical_default }


PK: BDF
-------
{ pk_bdf_default }

PK: Physical and BDF
--------------------
{ pk_physical_bdf_default }

Physical PKs
============
Physical PKs are the physical capability implemented within ATS.

Flow PKs
--------

Flow PKs describe the conservation of mass of water as it flows both
above and below-ground.  Subsurface flow PKs are based on 3D Richards
equation, which describes variably saturated flow in porous media.
Minor variations to this include the incorporation of freeze-thaw
processes.  Surface flow PKs are based on a diffusion wave equation
and Manning's model for sheet flow.  Variations to this also include
the incorporation of freeze-thaw processes.  Finally we include in
flow a "snow distribution" algorithm which takes as input
precipitation and applies it based on the existing surface level
(elevation + water + snowpack), thereby "filling in" low-lying areas
preferentially.  This makes for more accurate snowpacks at fine
scales.

Richards PK
^^^^^^^^^^^
{ richards }

Permafrost Flow PK
^^^^^^^^^^^^^^^^^^
{ permafrost }

Overland Flow PK
^^^^^^^^^^^^^^^^
{ overland_pressure }

Overland Flow with Ice
^^^^^^^^^^^^^^^^^^^^^^
{ icy_overland }

Snow Distribution PK
^^^^^^^^^^^^^^^^^^^^
{ snow_distribution }


Transport PK
------------

The Transport PK describes the conservation of mass of components transported
with water as it flows. The transport PK is based on the advection-diffusion 
equation, applies to one or more components that are dissolved in the aqueous 
phase, and is currently used in both surface and subsurface compartments. 
The key difference between surface and subsurface transport is in capturing 
the volume of water. In the subsurface, the volume of water is set by the 
porosity and saturation of the porous medium, while in the surface it is set 
by the ponded depth.

{transport_ats}

Energy PKs
-----------

Energy PKs describe the conservation of energy as it is advected and
diffuses both above and below-ground.  Both surface and subsurface
energy equations are based on a simple advection-diffusion equation,
and include variants with and without freeze-thaw processes.

Energy Base PK
^^^^^^^^^^^^^^
{ energy_base }

Two-Phase subsurface Energy PK
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
{ energy_two_phase }

Three-Phase subsurface Energy PK
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
{ energy_three_phase }

Overland energy with Ice
^^^^^^^^^^^^^^^^^^^^^^^^
{ energy_surface_ice }



Surface Energy Balance PKs
------------------------------

Integrated hydrology is not much use without significant process
complexity in source terms coming from the ecohydrologic environment.
These include straightforward sources, like precipitation, but also
more complicated ones such as evaporation and transpiration.

These terms are almost always tied up in a surface energy balance --
evaporation and transpiration are driven by vapor pressure gradients
between the atmosphere and the surface (either snow, ponded water,
soil, or leaf).  Solving a surface energy balance often requires
providing a bunch of terms, including radiated energy, conducted
energy, latent and sensible heat models, etc.

ATS currently has several approaches to calculating these -- see
`ats-demos <https://github.com/amanzi/ats-demos>`_ examples on
ecohydrology for a more in-depth discussion.

Balance Equation
^^^^^^^^^^^^^^^^
{ surface_balance_base }


Snow Balance Equation
^^^^^^^^^^^^^^^^^^^^^
{ surface_balance_implicit_subgrid }

Biogeochemistry
---------------

To accurately predict watershed ecohydrology, a carbon cycle model is
needed to predict transpiration.  By simulating a carbon cycle, we are
able to predict the rate of photosynthesis as a function of space and
time, and photosynthesis governs root water uptake.  Currently only
one big-leaf model is available, but ongoing work is wrapping a
generalized Common/Colorado Land Model based on that developed within
the ParFlow team, and another ongoing project is working on wrapping
kernels from E3SM's Land Model.

Biogeochemistry -- Monolithic Version
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
{ bgc_simple }



Deformation
-------------

The unstructured mesh framework we use provides the opportunity to
include deformation of the mesh.  This deformation can be done in two
ways -- either node coordinate changes are provided, or volumetric
changes are provided, and the code attempts to iterate toward a global
coordinate change that satisfies these volumetric changes.  The latter
can be somewhat fragile for large deformation, but it does allow
simple deformation such as small, somewhat uniform subsidence.  The
volumetric deformation PK below does this based on a volumetric change
given by loss of bulk ice.

Volumetric Deformation
^^^^^^^^^^^^^^^^^^^^^^
{ volumetric_deformation }


MPC
===

Multi-process-couplers or MPCs couple other PKs.  They also are PKs
themselves, in that they implement the PK interface.  So MPCs can also
couple other MPCs.  There are a few common "base" MPCs which do the
simplest form of coupling -- sequential and globally implicit (with a
diagonal preconditioner).  Then there are specific couplers which know
more about their coupled sub-PKs, and can do more complicated things
(for instance, adding off-diagonal block entries to the
preconditioner).

MPCs are also used to couple across domains -- for instance integrated
hydrology is a surface+subsurface flow coupler.  They also can do
fancier things like drape a bunch of subgrid columns off of a mesh, or
other things.  Think of these as the custom couplers.

Base MPC
--------
{ mpc }


WeakMPC
-------
{ weak_mpc }

StrongMPC
----------
{ strong_mpc }

Physical MPCs
===============

Coupling is an art, and often requires special off-diagonal work for
globally implicit coupling, and fancy games can be played with domains
to couple across domain interfaces both implicitly and sequentially.
Physical MPCs derive from default MPCs to provide special
implementations of some methods.

Coupled Water MPC
-----------------
{ mpc_coupled_water }

Coupled Cells MPC
-----------------
{ mpc_coupled_cells }

Subsurface MPC
--------------
{ mpc_subsurface }

Surface MPC
--------------
{ mpc_surface }

Permafrost MPC
--------------
{ mpc_permafrost }


Globalization Delegates
=======================

Globalization is the art of convincing a solver to find the solution.
Remember -- physics typically cares very little about *how* you get to
a solution, only that you get there.  If you can guess or otherwise
find the solution physically, without doing fancy math, go for it!
These delegates are handy utility classes which are used by MPCs to
effeciently leverage physics understanding in the mathematical solvers
to nudge the solver in the direction of a reasonable solution, or to
keep a solver from going off into a part of space which is totally
unphysical.  These can often make the difference between converging
and not converging.

Much of the efficiency of ATS comes from these delegates, and more of
them are always welcome contributions.

Coupled Water Globalization Delegate
------------------------------------
{ mpc_delegate_water }

EWC Globalization Delegate
--------------------------
{ mpc_delegate_ewc }

State
#####
{ State }

State consists of two sublists, one for evaluators and the other for
atomic constants.  The latter is currently called `"initial
conditions`", which is a terrible name which must be fixed.

example:

.. code-block:: xml
                
  <ParameterList name="state">
    <ParameterList name="field evaluators">
      ...
    </ParameterList>
    <ParameterList name="initial conditions">
      ...
    </ParameterList>
  </ParameterList>

 

Evaluators
==========

Evaluators are individual terms used to build up a PK or MPCs.  Each
term represents a variable in the equation, and can consist of primary
variables (those that are solved for by a PK solver), independent
variables (those that have no dependent variables but are provided by
the user as data), and secondary variables (those that are functions
of other variables).  Note that all three may be variable in space
and/or time.

.. contents:: **List of Evalutors**
   :local:

Primary Variables
-----------------
{ EvaluatorPrimary }

Independent Variables
---------------------

Independent variables are variables which do not depend upon other
dependent variables but are provided as data by the user.  Examples
include material properties, forcing datasets, etc.  These can be
provided in a few forms:

Constant
^^^^^^^^
{ EvaluatorIndependentConstant }

From Function
^^^^^^^^^^^^^
{ EvaluatorIndependentFunction }

From File
^^^^^^^^^
{ EvaluatorIndependentFromFile }


Secondary Variables
-------------------

All other evaluators are secondary variable evaluators, and these are
grouped by physics concept or process type.

Secondary variables, by definition, define functions that evaluate one
or more variables as a function of one or more variables.  Therefore
all secondary evaluators provide at least one "Key," which is the
variable(s) computed, and at least one "Dependency."

If the evaluator computes one and only one key, that key is provided
by the name of the parameter list in the `"evalutors`" list of State_.
If more than one Key is computed, then the second must either be
guessed by the code (for instance if the provided key is
"saturation_liquid", it is likely that the other key is
"saturation_gas") or provided by the user.  If more than one key is
computed, all of the keys computed can be specified exactly via the
input spec.  Keys are provided in one of two parameters:

* `"my variable key`" ``[string]`` Specifically name the variable used as "my variable"

* `"my variable key suffix`" ``[string]`` Name a suffix, and the
  variable is given by DOMAIN-SUFFIX, where the DOMAIN is given by the
  prefix in the evaluator list's name.  This is particularly useful
  for collections of enumerated PKs, e.g. columnar PKs, where the
  DOMAIN might be computed on the fly based on a column ID.

Dependencies use the same approach -- each dependency variable name
may include a default, and looks for a "key" and "key suffix" as
potential options.

As an example, a saturation evaluator may depend on pressure, and may
detail all of its names via something like:

.. code-block:: xml

    <ParameterList name="domain:1-saturation_liquid">
      <Parameter name="saturation gas key" type="string" value="domain:1-saturation_gas" />

      <Parameter name="pressure key suffix" type="string" value="pressure" />
      <!-- OR EQUIVALENTLY -->
      <Parameter name="pressure key" type="string" value="domain:1-pressure" />
    </ParameterList>


Conserved quantities
--------------------

Nearly all ATS process kernels are conservation equations, where there
is a formal conserved quantity, that, upon convergence, is conserved
to tolerance.  These are always an "extensive" quantity.

Water content in ATS is always measured on ``[mol]`` and therefore
includes a factor of the cell volume.  Energy in ATS is always
measured in ``[MJ]``.  Unlike nearly all other variables, this is not
SI, and is done so because this makes for fairly evenly balanced
equations between a coupled flow and energy problem.

Richards Equation water content (liquid only)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
{ richards_water_content_evaluator }

Liquid+Gas water content
^^^^^^^^^^^^^^^^^^^^^^^^
{ liquid_gas_water_content_evaluator }

Liquid+Ice water content
^^^^^^^^^^^^^^^^^^^^^^^^
{ liquid_ice_water_content_evaluator }

Liquid+Ice+Gas water content
^^^^^^^^^^^^^^^^^^^^^^^^^^^^
{ three_phase_water_content_evaluator }

Surface water content
^^^^^^^^^^^^^^^^^^^^^
{ overland_pressure_water_content_evaluator }

Snow or canopy water content
^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Most other water contents can be formed as `Multiplicative`_
evaluators.  See below for a few examples:

Multiplicative evalutator for `snow-water_content`:

.. code-block:: xml

      <ParameterList name="snow-water_content" type="ParameterList">
        <Parameter name="field evaluator type" type="string" value="multiplicative evaluator" />
        <Parameter name="evaluator dependencies" type="Array(string)" value="{{snow-cell_volume, snow-water_equivalent, surface-molar_density_liquid}}" />
        <Parameter name="units" type="string" value="mol" />
      </ParameterList>

Multiplicative evaluator for `canopy-water_content`:

.. code-block:: xml

      <ParameterList name="canopy-water_content" type="ParameterList">
        <Parameter name="field evaluator type" type="string" value="multiplicative evaluator" />
        <Parameter name="evaluator dependencies" type="Array(string)" value="{{canopy-cell_volume, canopy-water_equivalent, surface-molar_density_liquid}}" />
        <Parameter name="units" type="string" value="mol" />
      </ParameterList>

Richards energy
^^^^^^^^^^^^^^^
{ richards_energy_evaluator }

Liquid+Gas energy
^^^^^^^^^^^^^^^^^
{ liquid_gas_energy_evaluator }

Liquid+Ice energy
^^^^^^^^^^^^^^^^^
{ liquid_ice_energy_evaluator }

Liquid+Ice+Gas energy
^^^^^^^^^^^^^^^^^^^^^
{ three_phase_energy_evaluator }

Surface water+ice energy
^^^^^^^^^^^^^^^^^^^^^^^^
{ surface_ice_energy_evaluator }


Subsurface flow evaluators
--------------------------

Assorted evaluators used for subsurface flow processes,
including water retention curves, compressible pore space, relative
permeability, and their frozen equivalents.

Many of these evaluators show up in nearly all ATS simulations, as
subsurface flow of water is the core process underlying all of ATS
physics.  For real examples, see `ats-demos <https://github.com/amanzi/ats-demos>`_

Capillary pressure
^^^^^^^^^^^^^^^^^^
{ pc_liquid_evaluator }

Capillary pressure of liquid on ice
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
{ pc_ice_evaluator }

Water Retention Model and Relative Permeability
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
{ wrm_evaluator }
{ wrm_partition }
{ rel_perm_evaluator }

Van Genuchten Model
~~~~~~~~~~~~~~~~~~~
{ wrm_van_genuchten }

Linear  Model
~~~~~~~~~~~~~~~~~~~
{ wrm_linear_system }

Water Retention Model for Freeze-Thaw
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
{ wrm_permafrost_evaluator }

Original Implicit model
~~~~~~~~~~~~~~~~~~~~~~~
{ wrm_implicit_permafrost_model }

Freezing point depression model
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{ wrm_fpd_permafrost_model }

Freezing point depression, smoothed model
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{ wrm_fpd_smoothed_permafrost_model }

Interfrost model
~~~~~~~~~~~~~~~~
{ wrm_interfrost_permafrost_model }

Sutra-ICE model
~~~~~~~~~~~~~~~
{ wrm_sutra_permafrost_model }

Compressible porosity
^^^^^^^^^^^^^^^^^^^^^
{ compressible_porosity_evaluator }

Standard model
~~~~~~~~~~~~~~
{ compressible_porosity_model }

Exponential model
~~~~~~~~~~~~~~~~~
{ compressible_porosity_leijnse_model }


Viscosity of water
^^^^^^^^^^^^^^^^^^

Two main viscosity models are commonly used -- a constant and one
which is temperature-dependent.  The viscosity of water is strongly
temperature dependent, so it is highly recommended to use that one if
the problem is nonisothermal.

Constant
~~~~~~~~
Like any quantity, a viscosity can simply be a constant value, at which
point it is not a secondary variable but an independent variable.

.. code-block:: xml

      <ParameterList name="viscosity_liquid" type="ParameterList">
        <Parameter name="field evaluator type" type="string" value="independent variable constant" />
        <Parameter name="value" type="double" value="8.9e-4" />
        <Parameter name="units" type="string" value="Pa s" />
      </ParameterList>

Nonisothermal
~~~~~~~~~~~~~
{ viscosity_evaluator }
{ viscosity_water }


Surface flow evaluators
-----------------------

Assorted evaluators used for surface flow, including potential
surfaces, Manning's conductivity, and their frozen equivalents.

Like the subsurface flow evaluators, many of these evaluators show up
in nearly all ATS simulations.  For real examples, see `ats-demos
<https://github.com/amanzi/ats-demos>`_


Ponded Depth or Water Height
^^^^^^^^^^^^^^^^^^^^^^^^^^^^
{ height_evaluator }
{ height_model }

Ponded Depth, Frozen
^^^^^^^^^^^^^^^^^^^^
{ icy_height_evaluator }
{ icy_height_model }

Effective, or Smoothed Height
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
{ effective_height_evaluator }
{ effective_height_model }

Unfrozen fraction
^^^^^^^^^^^^^^^^^
{ unfrozen_fraction_evaluator }
{ unfrozen_fraction_model }

Unfrozen Flowing Depth
^^^^^^^^^^^^^^^^^^^^^^
{ unfrozen_effective_depth_evaluator }

SurfacePotential
^^^^^^^^^^^^^^^^^^^
{ pres_elev_evaluator }

Overland Conductivity, sheet flow
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.. _`Overland Conductivity Evaluator`:
{ overland_conductivity_evaluator }
{ manning_conductivity_model }

Overland Conductivity, litter resistance
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
{ manning_coefficient_litter_evaluator }
{ manning_coefficient_litter_model }


Thermodynamic evaluators
-------------------------

Internal energy, enthalpy, thermal conductivity, etc used for both
surface and subsurface transport of energy.

Internal energy
^^^^^^^^^^^^^^^
{ iem_evaluator }

Linear
~~~~~~
{ iem_linear }

Quadratic
~~~~~~~~~
{ iem_quadratic }

Water Vapor
~~~~~~~~~~~
{ iem_water_vapor_evaluator }
{ iem_water_vapor }

Enthalpy
~~~~~~~~
{ enthalpy_evaluator }

Thermal Conductivity, two phases
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
{ thermal_conductivity_twophase_evaluator }

Wet-Dry Model
~~~~~~~~~~~~~
{ thermal_conductivity_twophase_wetdry }

Peters-Lidard Model
~~~~~~~~~~~~~~~~~~~
{ thermal_conductivity_twophase_peterslidard }

Thermal Conductivity, three phases
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
{ thermal_conductivity_threephase_evaluator }

Wet-Dry Model
~~~~~~~~~~~~~
{ thermal_conductivity_threephase_wetdry }

Peters-Lidard Model
~~~~~~~~~~~~~~~~~~~
{ thermal_conductivity_threephase_peterslidard }

Volume-averaged Model
~~~~~~~~~~~~~~~~~~~~~
{ thermal_conductivity_threephase_volume_averaged }

Sutra-ICE model
~~~~~~~~~~~~~~~~~~~
{ thermal_conductivity_threephase_sutra_hacked }

Thermal Conductivity, Surface
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
{ thermal_conductivity_surface_evaluator }

Advected Energy Source
^^^^^^^^^^^^^^^^^^^^^^
{ advected_energy_source_evaluator }

Active Layer Averaged Temperature
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
{ activelayer_average_temp_evaluator }

Water Table
^^^^^^^^^^^
{ water_table_depth_evaluator }

Thaw Depth
^^^^^^^^^^
{ thaw_depth_evaluator }


Equations of State
------------------

The density of water can be specified in many ways, depending upon
phase and problem of interest.  Options are available from the
simplest (constant value) to functions of just temperature,
temperature and pressure, and temperature/pressure/concentration
(e.g. salinity).

Note that density includes both molar and mass-based values.  Most
density evaluators can provide either, or do provide both, the
difference being simply a factor of the molecular mass of water.

Finally, nearly all (except the constant value) equations of state use
a common set of models which accept all of temperature, pressure, and
concentration.  Many of these models ignore one or the other, so it
should be preferred (but is not necessary) to choose the right model
for a given evaluator.  Choosing a model that uses fewer of
these than the evaluator provides is valid, but it is inefficient.
Choosing a model that uses more than the evaluator provides will
result in an error.

Constant Value
^^^^^^^^^^^^^^

Like any quantity, a density can simply be a constant value, at which
point it is not a secondary variable but an independent variable.

.. code-block:: xml

      <ParameterList name="surface-molar_density_liquid" type="ParameterList">
        <Parameter name="field evaluator type" type="string" value="independent variable constant" />
        <Parameter name="value" type="double" value="55000" />
        <Parameter name="units" type="string" value="mol m^-3" />
      </ParameterList>

Standard Equation of State
^^^^^^^^^^^^^^^^^^^^^^^^^^
{ eos_evaluator }

Models
^^^^^^

Constant EOS
~~~~~~~~~~~~
{ eos_constant }

Linear EOS
~~~~~~~~~~
{ eos_linear }

Ideal Gas
~~~~~~~~~
{ eos_ideal_gas }

EOS of Water
~~~~~~~~~~~~
{ eos_water }

EOS of Ice
~~~~~~~~~~
{ eos_ice }

EOS of Vapor in Air
~~~~~~~~~~~~~~~~~~~
{ eos_vapor_in_gas }

EOS of Saltwater
~~~~~~~~~~~~~~~~
{ eos_sw }

Surface energy balance evaluators
---------------------------------

Evaluators used to solve the fluxes to and from the atmosphere and
between layers of the surface.  Typically in ATS these calculate
evapotranspiration.

Area Fractions
^^^^^^^^^^^^^^

Frequently, the surface of a grid cell is split across at least two
"subgrid components," for instance snow covered and bare ground.  This
"subgrid" model allows smooth transitions between fully snow-covered
and fully bare ground.

These area fractions often get included as area-weights in calculating
full-cell quantities.

Two-component model
~~~~~~~~~~~~~~~~~~~~~~~~~~
{ area_fractions_twocomponent_evaluator }

Three-component model
~~~~~~~~~~~~~~~~~~~~~~~~~~
{ area_fractions_threecomponent_evaluator }

Three-component model, with microtopography
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{ area_fractions_threecomponent_microtopography_evaluator }


Potential Evapotranspiration
^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Models of potential evapotranspiration approximate the difference in
vapor pressure between the atmosphere and the soil as a function of
available energy, allowing the calculation of the max flux of ET that
the atmosphere could accept.  This can then be limited based on water
availability, etc.

Priestley-Taylor Potential Evapotranspiration
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{ pet_priestley_taylor_evaluator }

Downregulation and limiters
^^^^^^^^^^^^^^^^^^^^^^^^^^^

Given a potential, the actual ET is often limited by available water
(or nutrients or other quantities).  These evaluators are used to
limit, downregulate, distribute, or otherwise move a potential to an
actual ET.

Transpiration Distribution
~~~~~~~~~~~~~~~~~~~~~~~~~~
{ transpiration_distribution_evaluator }

Rooting Depth Fraction
~~~~~~~~~~~~~~~~~~~~~~
{ rooting_depth_fraction_evaluator }

Plant Wilting Point
~~~~~~~~~~~~~~~~~~~
{ plant_wilting_factor_evaluator }

Soil Resistance
^^^^^^^^^^^^^^^
{ evaporation_downregulation_evaluator }


Radiation Balance Terms
^^^^^^^^^^^^^^^^^^^^^^^

Often a balance of incoming and outgoing short and longwave radiations
are required to determine the energy available to go into latent heat,
and therefore potential evapotranspiration.

Note that incoming shortwave radiation is typically a user-provided
meterological forcing dataset.

Radiation Balance
~~~~~~~~~~~~~~~~~
{ radiation_balance_evaluator }

Canopy Radiation Balance
~~~~~~~~~~~~~~~~~~~~~~~~
{ canopy_radiation_evaluator }

Surface Albedo
~~~~~~~~~~~~~~

Note that albedo is also a multiple subgrid component model, like
surface balance.

{ albedo_twocomponent_evaluator }

{ albedo_threecomponent_evaluator }

Incident Shortwave Radiation
~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{ incident_shortwave_radiation_evaluator }
{ incident_shortwave_radiation_model }

Longwave Radiation
~~~~~~~~~~~~~~~~~~
{ longwave_evaluator }

Full Surface Energy Balance Models
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Finally, in addition to the potential-based models above, a few
full-physics model are available.  These are often based on older,
monolithic models.

Bare Soil Surface Energy Balance
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{ seb_twocomponent_evaluator }

{ seb_threecomponent_evaluator }

Common Land Model (ParFlow-CLM)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

This is included here because it should eventually get split into
evaluators.  Currently, the CLM SEB model is a PK only, see `Common
Land Model PK`_.

Snow evaluators
---------------

Evaluators used for solving snowpack and/or snow redistribution laterally.

SnowSurfacePotential
^^^^^^^^^^^^^^^^^^^^^^
{ snow_skin_potential_evaluator }

Snow Melt Rate
^^^^^^^^^^^^^^
{ snow_meltrate_evaluator }


Canopy evaluators
-----------------

Interception
^^^^^^^^^^^^
{ interception_fraction_evaluator }
{ interception_fraction_model }

Drainage
^^^^^^^^
{ drainage_evaluator }




Carbon and Biogeochemistry Models
---------------------------------

Carbon Decomposition Rate
^^^^^^^^^^^^^^^^^^^^^^^^^
{ carbon_decomposition_rate_evaluator }

Cryo/bioturbation
^^^^^^^^^^^^^^^^^
{ bioturbation_evaluator }

Pool Decomposition
^^^^^^^^^^^^^^^^^^
{ pool_decomposition_evaluator }

Pool Transfer
^^^^^^^^^^^^^
{ pool_transfer_evaluator }


Multiscale Models
-----------------

Subgrid Aggregation
^^^^^^^^^^^^^^^^^^^^^^
{ SubgridAggregateEvaluator }

Subgrid disaggregation
^^^^^^^^^^^^^^^^^^^^^^
{ SubgridDisaggregateEvaluator }


Geometric evaluators
--------------------

Evaluators that capture various aspects of the mesh geometry.

SurfaceElevation
^^^^^^^^^^^^^^^^^^
{ meshed_elevation_evaluator }

Elevation of a Column
^^^^^^^^^^^^^^^^^^^^^
{ elevation_evaluator_column }

Depth Evaluator
^^^^^^^^^^^^^^^
{ depth_evaluator }

Cell Volume evaluator
^^^^^^^^^^^^^^^^^^^^^
{ EvaluatorCellVolume }

Deforming Cell Volume evaluator
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
{ EvaluatorDeformingCellVolume }


Generic evaluators
------------------

These evaluators take arguments to allow the user to provide custom
functions via the input spec.

Additive
^^^^^^^^
{ AdditiveEvaluator }

Multiplicative
^^^^^^^^^^^^^^
{ MultiplicativeEvaluator }

Column summation
^^^^^^^^^^^^^^^^
{ ColumnSumEvaluator }

Top cell
^^^^^^^^
{ top_cells_surface_evaluator }

Arbitrary function
^^^^^^^^^^^^^^^^^^
{ EvaluatorSecondaryMonotypeFromFunction }


InitialConditions
=================

Initial condition specs are used in three places:

* In the `"initial conditions`" sublist of state, in which the value
  of atomic constants are provided (not really initial conditions and
  should be renamed).  These atomic values are not controlled by
  evaluators, and are not included in the DaG.

* Within the PK_ spec which describes the initial condition of primary variables (true
  initial conditions).

* In `IndependentVariableEvaluator Constant <Constant_>`_

The first may be of multiple types of data, while the latter two are
nearly always fields on a mesh (e.g. CompositeVectors).  The specific
available options for initializing various data in state differ by
data type.

{ Data_Helpers }

BoundaryConditions
===================

{ bc_factory }

Flow-specific Boundary Conditions
----------------------------------

{ flow_bc_factory }

Transport-specific Boundary Conditions
--------------------------------------

{ TransportBoundaryFunction_Alquimia }


Energy-specific Boundary Conditions
-----------------------------------

{ energy_bc_factory }






Time integrators, solvers, and other mathematical specs
#######################################################

  Common specs for all solvers and time integrators, used in PKs.

There are three commonly used broad classes of time integration
strategies.

"Update" methods are the simplest -- they use no formal
mathematical definition of a differential equation, but instead
implicitly use a process by which variables at the new time are
directly calculated.  Typically there *is* an implied ODE or PDE here,
but it is not stated as such and time integration routines are not
used.  Examples of these are common in biogeochemistry and vegetation
models.

"Explicit" time methods are the next simplest.  These include a
variety of options from forward Euler to higher order Runge-Kutta
schemes.  These only require evaluating forward models where we have
existing of the dependencies.  If they work, these are great thanks to
their deterministic nature and lack of expensive, memory-bandwith
limited solvers.  But they only work on some types of problems.
Examples of of these include transport, where we use high order time
integration schemes to preserve fronts.

"Implicit" and semi-implicit methods instead require the evaluation of
a residual equation -- the solution is guessed at, and the residual is
calculated, which measures how far the equation is from being
satisfied.  This measure is then inverted, finding a correction to the
guess which hopefully reduces the residual.  As the residual goes to
zero, the error, a measure of the difference between the guess and the
true solution, also goes to zero.  To do this inversion, we lean on
Newton and Newton-like methods, which attempt to somehow linearize, or
approximately linearize, the residual function near the guess in order
to calculate an update.  In this case, the time integration scheme
requires both a nonlinear solver (to drive the residual to zero) and a
linear solver or approximate solver (to calculate the correction).

TimeIntegrator
==============

Currently there are two classes of time integration schemes used in
ATS: explicit (including a range of single and multi-stage) methods
and BDF1, or Backward Euler.

Explicit Time Integration
-------------------------
{ Explicit_TI_RK }

Backward Euler
--------------
{ BDF1_TI }

BDF1 Solver Interface
^^^^^^^^^^^^^^^^^^^^^
{ BDF1_SolverFnBase }

Timestep Controller
-------------------
{ TimestepControllerFactory }

Timestep Controller Fixed
^^^^^^^^^^^^^^^^^^^^^^^^^
{ TimestepControllerFixed }

Timestep Controller Standard
^^^^^^^^^^^^^^^^^^^^^^^^^^^^
{ TimestepControllerStandard }

Timestep Controller Smarter
^^^^^^^^^^^^^^^^^^^^^^^^^^^
{ TimestepControllerSmarter }

Timestep Controller Adaptive
^^^^^^^^^^^^^^^^^^^^^^^^^^^^
{ TimestepControllerAdaptive }

Timestep Controller From File
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
{ TimestepControllerFromFile }


Nonlinear Solver
================
.. _Solver:
   
{ SolverFactory }

Solver: Newton and Inexact Newton
---------------------------------
{ SolverNewton }

Solver: Jacobian-Free Newton Krylov
-----------------------------------
{ SolverJFNK }
{ MatrixJF }

Solver: Newton with Line Search
-------------------------------
{ SolverBT }

Solver: Nonlinear Continuation
------------------------------
{ SolverContinuation }

Solver: Nonlinear Krylov Acceleration
-------------------------------------
{ SolverNKA }

Solver: Anderson Acceleration
-----------------------------
{ SolverAA }

Solver: NKA with Line Search
----------------------------
{ SolverNKA_LS }

Solver: NKA with Line Search, ATS
---------------------------------
{ SolverNKA_LS_ATS }

Solver: NKA with backtracking, ATS
----------------------------------
{ SolverNKA_BT_ATS }

Solver: NOX
----------------------------------
{ SolverNox }


Linear Solvers
==============
.. _LinearOperator:
.. _`LinearSolvers`:
.. _`Linear Solver`:
.. _`Inverse`:

{ Inverse }

Linear Solver: PCG
--------------------
{ IterativeMethodPCG }

Linear Solver: GMRES
--------------------
{ IterativeMethodGMRES }

Linear Solver: NKA
--------------------
{ IterativeMethodNKA }

Linear Solver: Amesos
---------------------
{ DirectMethodAmesos }

Linear Solver: Amesos
---------------------
{ DirectMethodAmesos2 }

Linear Solver: Belos (GMRES)
----------------------------
{ IterativeMethodBelos }


Preconditioners
===============
.. _Preconditioner:

{ Preconditioner }

Identity
--------
{ PreconditionerIdentity }

Diagonal
--------
{ PreconditionerDiagonal }

Block ILU
---------
{ PreconditionerIfpack }

Boomer AMG and Euclid
----------------------
{ PreconditionerHypre }

ML (Trilinos AMG)
-----------------
{ PreconditionerML }


Other Common Specs
##################

IOEvent
=======
{ IOEvent }

Verbose Object
==============
{ VerboseObject }

Debugger
========
{ Debugger }

Residual Debugger
=================
{ ResidualDebugger }

   

Function
===================
{ Function }

It is straightforward to add new functions as needed.

Constant Function
-------------------------
{ FunctionConstant }  

Tabular Function
-------------------------
{ FunctionTabular }

Smooth step Function
-------------------------
{ FunctionSmoothStep }

Polynomial Function
-------------------------
{ FunctionPolynomial }  

Multi-variable linear Function
------------------------------
{ FunctionLinear }  

Separable Function
------------------
{ FunctionSeparable }

Additive Function
------------------
{ FunctionAdditive }

Multiplicative Function
--------------------------
{ FunctionMultiplicative }

Composition Function
--------------------------
{ FunctionComposition }

Piecewise Bilinear Function
---------------------------
{ FunctionBilinear }

Distance Function
-----------------
{ FunctionDistance }

Monomial Function
-----------------
{ FunctionMonomial }

Standard Math Function
----------------------
{ FunctionStandardMath }



Operator
========

{ Operator }

PDE_Accumulation
----------------
{ PDE_Accumulation }

PDE_Diffusion
-------------
{ PDE_DiffusionFactory }

{ PDE_Diffusion }

{ PDE_DiffusionMFD }

{ PDE_DiffusionMFDwithGravity }

{ PDE_DiffusionFV }

{ PDE_DiffusionFVwithGravity }


PDE_Advection
-------------

{ PDE_Advection }

{ PDE_AdvectionUpwind }


Field Initializers
==================

Fields, also known by their underlying datatype, the CompositeVector,
can be initialized in a variety of ways.  These are used in a variety
of places as generic capability.

Function Initialization
-----------------------
.. _CompositeVectorFunction:

{ CompositeVectorFunctionFactory }

Column File Initialization
--------------------------
{ ColumnMeshFunction }

Exodus File Initialization
--------------------------
{ IO }
