name: ATS CI

on:
  workflow_dispatch:
    branches:
      - '**'
  push:
    branches:
      - '**'
    tags-ignore:
      - ats-*

jobs:
  build:
    strategy:
      matrix:
        os: [ ubuntu-latest, ubuntu-24.04-arm ]
    runs-on: ${{ matrix.os }}
    name: Build Docker
    steps:
    - name: Check out the Amanzi repo
      uses: actions/checkout@v4
      with:
        repository: amanzi/amanzi
        ref: amanzi-1.6
        submodules: recursive
    - name: Extract the ATS branch name
      id: branch
      working-directory: Docker
      run: |
        echo "ATS_BRANCH=$GITHUB_REF_NAME" >> $GITHUB_ENV
    - name: Does Amanzi branch of the same name exist?
      id: amanzi_branch
      run: |
        echo "AMANZI_BRANCH=$(git ls-remote --heads origin ${GITHUB_REF_NAME} | sed 's/.*refs\/heads\///')" >> $GITHUB_ENV
    - name: If so, checkout Amanzi to get the right TPLs version
      id: amanzi_branch_checkout
      uses: actions/checkout@v4
      with:
        repository: amanzi/amanzi
        ref: ${{env.AMANZI_BRANCH}}
        submodules: recursive
    - name: Does ats-regression-tests branch of the same name exist?
      id: ats_tests_branch
      working-directory: src/physics/ats/testing/ats-regression-tests
      run: |
        echo "ATS_TESTS_BRANCH=$(git ls-remote --heads origin ${GITHUB_REF_NAME} | sed 's/.*refs\/heads\///')" >> $GITHUB_ENV
    - name: Filter the branch name to generate a tag for Docker
      id: tag
      run: |
        echo "ATS_BRANCH_TAG=$(echo ${{env.ATS_BRANCH}} | sed -e 's/\//--/g')" >> $GITHUB_ENV
    - name: Get TPLs version
      id: version
      working-directory: Docker
      run: |
        echo "AMANZI_TPLS_VER=$(./get_tpls_version.sh)" >> $GITHUB_ENV
    - name: Print out environment
      run: |
        echo "Amanzi branch = ${{env.AMANZI_BRANCH}}";
        echo "ATS branch = ${{env.ATS_BRANCH}}";
        echo "ats-regression-tests branch = ${{env.ATS_TESTS_BRANCH}}";
        echo "Tag reference = ${{env.ATS_BRANCH_TAG}}"
        echo "TPLs version = ${{env.AMANZI_TPLS_VER}}"
    - name: Get runner architecture
      run: |
        if [[ ${{matrix.os}} == "ubuntu-24.04-arm" ]]; then
          echo "ARCH=arm64" >> $GITHUB_ENV
        else
          echo "ARCH=amd64" >> $GITHUB_ENV
        fi
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{secrets.DOCKERHUB_USERNAME}}
        password: ${{secrets.DOCKERHUB_PASSWORD}}
    - name: Docker build and push
      id: docker
      working-directory: Docker
      shell: bash
      run: |
          docker build --build-arg ARCH=linux/${{env.ARCH}} \
                       --build-arg amanzi_tpls_ver=${{env.AMANZI_TPLS_VER}} \
                       --build-arg amanzi_branch=${{env.AMANZI_BRANCH}} \
                       --build-arg ats_branch=${{env.ATS_BRANCH}} \
                       --build-arg ats_tests_branch=${{env.ATS_TESTS_BRANCH}} \
                       -t metsi/ats:${{env.ATS_BRANCH_TAG}}-${{env.ARCH}}-latest -f Dockerfile-ATS-build .
          docker push ${{secrets.DOCKERHUB_USERNAME}}/ats:${{env.ATS_BRANCH_TAG}}-${{env.ARCH}}-latest
  serial-reg15-tests:
    strategy:
      matrix:
        os: [ ubuntu-latest, ubuntu-24.04-arm ]
    runs-on: ${{ matrix.os }}
    name: serial and regression 1-5 series tests
    needs: build
    steps:
    - name: Check out the Amanzi repo
      uses: actions/checkout@v4
      with:
        repository: amanzi/amanzi
        ref: master
        submodules: recursive
    - name: Extract the ATS branch name
      id: branch
      working-directory: Docker
      run: |
        echo "ATS_BRANCH=$GITHUB_REF_NAME" >> $GITHUB_ENV
    - name: Filter the branch name to generate a tag for Docker
      id: tag
      run: |
        echo "ATS_BRANCH_TAG=$(echo ${{env.ATS_BRANCH}} | sed -e 's/\//--/g')" >> $GITHUB_ENV
    - name: Get runner architecture
      run: |
        if [[ ${{matrix.os}} == "ubuntu-24.04-arm" ]]; then
          echo "ARCH=arm64" >> $GITHUB_ENV
        else
          echo "ARCH=amd64" >> $GITHUB_ENV
        fi
    - name: Run tests
      id: tests
      working-directory: Docker
      run:
        docker run --rm ${{secrets.DOCKERHUB_USERNAME}}/ats:${{env.ATS_BRANCH_TAG}}-${{env.ARCH}}-latest /bin/bash -c "cd ~/amanzi_builddir/ats; ctest --output-on-failure -LE PARALLEL -E 'ats_regression_test-[1-9][0-9]|ats_regression_test-0[6-9]'"
  parallel-tests:
    strategy:
      matrix:
        os: [ ubuntu-latest, ubuntu-24.04-arm ]
    runs-on: ${{ matrix.os }}
    name: parallel and regression 6-10 series tests
    needs: build
    steps:
    - name: Check out the Amanzi repo
      uses: actions/checkout@v4
      with:
        repository: amanzi/amanzi
        ref: master
        submodules: recursive
    - name: Extract the ATS branch name
      id: branch
      working-directory: Docker
      run: |
        echo "ATS_BRANCH=$GITHUB_REF_NAME" >> $GITHUB_ENV
    - name: Filter the branch name to generate a tag for Docker
      id: tag
      run: |
        echo "ATS_BRANCH_TAG=$(echo ${{env.ATS_BRANCH}} | sed -e 's/\//--/g')" >> $GITHUB_ENV
    - name: Get runner architecture
      run: |
        if [[ ${{matrix.os}} == "ubuntu-24.04-arm" ]]; then
          echo "ARCH=arm64" >> $GITHUB_ENV
        else
          echo "ARCH=amd64" >> $GITHUB_ENV
        fi
    - name: Run tests
      id: tests
      working-directory: Docker
      run: |
        docker run --rm ${{secrets.DOCKERHUB_USERNAME}}/ats:${{env.ATS_BRANCH_TAG}}-${{env.ARCH}}-latest /bin/bash -c "cd ~/amanzi_builddir/ats; ctest --output-on-failure -L PARALLEL; ctest --output-on-failure -R 'ats_regression_test-0[6-9]|ats_regression_test-[1-9][0-9]'"
  fix-manifest:
    runs-on: ubuntu-latest
    needs: [serial-reg15-tests, parallel-tests]
    if: success()
    steps:
      - name: Check out the ATS repo
        uses: actions/checkout@v4
        with:
          repository: amanzi/amanzi
          ref: master
          submodules: recursive
      - name: Filter the branch name to generate a tag for Docker
        id: tag
        run: |
          echo "ATS_BRANCH_TAG=$(echo $GITHUB_REF_NAME | sed -e 's/\//--/g')" >> $GITHUB_ENV
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{secrets.DOCKERHUB_USERNAME}}
          password: ${{secrets.DOCKERHUB_PASSWORD}}
      - name: Pull images (remove with artifacts??)
        run: |
          docker pull ${{secrets.DOCKERHUB_USERNAME}}/ats:${{env.ATS_BRANCH_TAG}}-arm64-latest
          docker pull ${{secrets.DOCKERHUB_USERNAME}}/ats:${{env.ATS_BRANCH_TAG}}-amd64-latest
      - name: Edit manifest
        run: |
          docker manifest create ${{secrets.DOCKERHUB_USERNAME}}/ats:${{env.ATS_BRANCH_TAG}}-latest \
            --amend ${{secrets.DOCKERHUB_USERNAME}}/ats:${{env.ATS_BRANCH_TAG}}-arm64-latest \
            --amend ${{secrets.DOCKERHUB_USERNAME}}/ats:${{env.ATS_BRANCH_TAG}}-amd64-latest
          docker manifest push ${{secrets.DOCKERHUB_USERNAME}}/ats:${{env.ATS_BRANCH_TAG}}-latest

