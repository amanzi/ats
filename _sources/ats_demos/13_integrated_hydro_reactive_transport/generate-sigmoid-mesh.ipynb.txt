{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "a02ec116-083c-47d7-b84f-76fcac236d56",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Matplotlib created a temporary config/cache directory at /tmp/matplotlib-njroe6pg because the default path (/home/ats_sc_user/.cache/matplotlib) is not a writable directory; it is highly recommended to set the MPLCONFIGDIR environment variable to a writable directory, in particular to speed up the import of Matplotlib and to better support multiprocessing.\n"
     ]
    }
   ],
   "source": [
    "import sys,os\n",
    "sys.path.append(os.path.join(os.environ['ATS_SRC_DIR'],'tools','meshing','meshing_ats'))\n",
    "import meshing_ats\n",
    "\n",
    "import numpy as np\n",
    "from matplotlib import pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "3bbba225-f24b-4798-bed7-f6659ae0db37",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "# of x and z coordinates: 101, 101\n",
      "0.0 1000.0\n",
      "95.25741268224333 11.920292202211769\n",
      "# of cells: 100\n",
      "slope:  -0.08333712048003156\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Specify the top surface, given by z(x).\n",
    "#\n",
    "# 1 km long hillslope, 10% slope, 100 cells (or 101 nodes) in x.\n",
    "x = np.linspace(0,1000,101)\n",
    "z = 100*(1-1/(1+np.exp(-(x-600)/200)))\n",
    "print(f'# of x and z coordinates: {len(x)}, {len(z)}')\n",
    "print(x[0],x[100])\n",
    "print(z[0],z[100])\n",
    "\n",
    "# plot the surface topography\n",
    "plt.plot(x,z); plt.xlabel('x distance (m)'); plt.ylabel('z elevation (m)')\n",
    "\n",
    "# make the (manifold) 2D mesh.\n",
    "m2 = meshing_ats.Mesh2D.from_Transect(x,z)\n",
    "print(f'# of cells: {m2.num_cells()}')\n",
    "\n",
    "print(\"slope: \",(z[100]-z[0])/(x[100]-x[0]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "9d2a31a2-d3aa-4668-a120-3158df01e352",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# In this mesh, we vary the organic layer thickness across the hillslope.\n",
    "#\n",
    "# Changing organic layer thickness \n",
    "def organic_thickness(x):\n",
    "    \"\"\"This function is the thickness of the layer we want to vary as a function of distance down the slope\"\"\"\n",
    "    if x < 100:\n",
    "        thickness = 0.5\n",
    "    elif ((100 <= x) and (x <= 200)):\n",
    "        thickness = -0.0045*x + 0.95\n",
    "    elif ((200 < x) and (x < 800)):\n",
    "        thickness = 0.05\n",
    "    elif ((800 <= x) and (x <= 900)):\n",
    "        thickness = 0.0025*x - 1.95\n",
    "    else:\n",
    "        thickness = 0.3\n",
    "    return thickness\n",
    "\n",
    "org_layer_thickness = np.array([organic_thickness(xx) for xx in m2.coords[:,0]])\n",
    "plt.plot(x, org_layer_thickness[0:101]); plt.xlabel('x distance (m)'); plt.ylabel('org. layer thickness (m)');"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "f59beaf3-5367-4808-a9cf-7be35c5949cb",
   "metadata": {},
   "outputs": [],
   "source": [
    "# geometry of the transect extrusion\n",
    "transect_layer_types = []\n",
    "transect_layer_data = []\n",
    "transect_layer_ncells = []\n",
    "\n",
    "depth = []  # bookkeeping for material IDs\n",
    "current_depth = 0\n",
    "\n",
    "# We use the same dz as the above column, but because the material ID will change\n",
    "# at a given depth in x, we spell it out with 1 cell per transect.\n",
    "#\n",
    "# 10 cells @ 5cm\n",
    "dz = .05\n",
    "depth.append(current_depth)\n",
    "for i in range(10):\n",
    "    transect_layer_types.append('constant')\n",
    "    transect_layer_data.append(dz)\n",
    "    transect_layer_ncells.append(1)\n",
    "    current_depth += dz\n",
    "    depth.append(current_depth)\n",
    "    \n",
    "# grow dz by factors of 2, til we hit 2m\n",
    "i = 0\n",
    "while current_depth < 2:\n",
    "    dz *= 2\n",
    "    transect_layer_types.append(\"constant\")\n",
    "    transect_layer_data.append(dz)\n",
    "    transect_layer_ncells.append(1)\n",
    "    current_depth += dz\n",
    "    depth.append(current_depth)\n",
    "\n",
    "# 2m cells to 40m\n",
    "dz = 2\n",
    "while current_depth < 40:\n",
    "    transect_layer_types.append(\"constant\")\n",
    "    transect_layer_data.append(dz)\n",
    "    transect_layer_ncells.append(1)\n",
    "    current_depth += dz\n",
    "    depth.append(current_depth)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "027c8ff2-5705-45f8-be62-5905328db543",
   "metadata": {},
   "outputs": [],
   "source": [
    "# calculate the cell centroid depth\n",
    "depth = np.array(depth)\n",
    "transect_layer_depth = (depth[0:-1] + depth[1:])/2\n",
    "\n",
    "# allocate 2D matrix for material id, (# surface cells, # layers)\n",
    "n_layers = len(transect_layer_data)\n",
    "transect_layer_mat_ids=np.zeros((n_layers, m2.num_cells()), 'i')\n",
    "for j in range(m2.num_cells()):\n",
    "    for i in range(n_layers):\n",
    "        if (transect_layer_depth[i] < org_layer_thickness[j]):\n",
    "            transect_layer_mat_ids[i,j] = 1001\n",
    "        elif transect_layer_depth[i] < 2:\n",
    "            transect_layer_mat_ids[i,j] = 1002\n",
    "        else:\n",
    "            transect_layer_mat_ids[i,j] = 999\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "040dd6af-5831-46d4-94eb-da0a41dd26b8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Cell summary:\n",
      "------------------------------------------------------------\n",
      "l_id\t| c_id\t|mat_id\t| dz\t\t| z_top\n",
      "------------------------------------------------------------\n",
      " 00 \t| 00 \t| 1001 \t|   0.050000 \t|   0.000000\n",
      " 01 \t| 01 \t| 1001 \t|   0.050000 \t|   0.050000\n",
      " 02 \t| 02 \t| 1001 \t|   0.050000 \t|   0.100000\n",
      " 03 \t| 03 \t| 1001 \t|   0.050000 \t|   0.150000\n",
      " 04 \t| 04 \t| 1001 \t|   0.050000 \t|   0.200000\n",
      " 05 \t| 05 \t| 1001 \t|   0.050000 \t|   0.250000\n",
      " 06 \t| 06 \t| 1001 \t|   0.050000 \t|   0.300000\n",
      " 07 \t| 07 \t| 1001 \t|   0.050000 \t|   0.350000\n",
      " 08 \t| 08 \t| 1001 \t|   0.050000 \t|   0.400000\n",
      " 09 \t| 09 \t| 1001 \t|   0.050000 \t|   0.450000\n",
      " 10 \t| 10 \t| 1002 \t|   0.100000 \t|   0.500000\n",
      " 11 \t| 11 \t| 1002 \t|   0.200000 \t|   0.600000\n",
      " 12 \t| 12 \t| 1002 \t|   0.400000 \t|   0.800000\n",
      " 13 \t| 13 \t| 1002 \t|   0.800000 \t|   1.200000\n",
      " 14 \t| 14 \t|  999 \t|   2.000000 \t|   2.000000\n",
      " 15 \t| 15 \t|  999 \t|   2.000000 \t|   4.000000\n",
      " 16 \t| 16 \t|  999 \t|   2.000000 \t|   6.000000\n",
      " 17 \t| 17 \t|  999 \t|   2.000000 \t|   8.000000\n",
      " 18 \t| 18 \t|  999 \t|   2.000000 \t|  10.000000\n",
      " 19 \t| 19 \t|  999 \t|   2.000000 \t|  12.000000\n",
      " 20 \t| 20 \t|  999 \t|   2.000000 \t|  14.000000\n",
      " 21 \t| 21 \t|  999 \t|   2.000000 \t|  16.000000\n",
      " 22 \t| 22 \t|  999 \t|   2.000000 \t|  18.000000\n",
      " 23 \t| 23 \t|  999 \t|   2.000000 \t|  20.000000\n",
      " 24 \t| 24 \t|  999 \t|   2.000000 \t|  22.000000\n",
      " 25 \t| 25 \t|  999 \t|   2.000000 \t|  24.000000\n",
      " 26 \t| 26 \t|  999 \t|   2.000000 \t|  26.000000\n",
      " 27 \t| 27 \t|  999 \t|   2.000000 \t|  28.000000\n",
      " 28 \t| 28 \t|  999 \t|   2.000000 \t|  30.000000\n",
      " 29 \t| 29 \t|  999 \t|   2.000000 \t|  32.000000\n",
      " 30 \t| 30 \t|  999 \t|   2.000000 \t|  34.000000\n",
      " 31 \t| 31 \t|  999 \t|   2.000000 \t|  36.000000\n",
      " 32 \t| 32 \t|  999 \t|   2.000000 \t|  38.000000\n"
     ]
    }
   ],
   "source": [
    "# print out the layer information for the first column of cells\n",
    "meshing_ats.summarize_extrusion(transect_layer_types, transect_layer_data, \n",
    "                                transect_layer_ncells, transect_layer_mat_ids, 0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "1ee6745c-77b1-437a-804c-75f739563735",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "You are using exodus.py v 1.20.2 (seacas-py3), a python wrapper of some of the exodus library.\n",
      "\n",
      "Copyright (c) 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021 National Technology &\n",
      "Engineering Solutions of Sandia, LLC (NTESS).  Under the terms of\n",
      "Contract DE-NA0003525 with NTESS, the U.S. Government retains certain\n",
      "rights in this software.\n",
      "\n",
      "Opening exodus file: transect-sigmoid.exo\n",
      "Closing exodus file: transect-sigmoid.exo\n"
     ]
    }
   ],
   "source": [
    "# make the mesh, save it as an exodus file\n",
    "m3 = meshing_ats.Mesh3D.extruded_Mesh2D(m2, transect_layer_types,transect_layer_data, \n",
    "                                        transect_layer_ncells, transect_layer_mat_ids)\n",
    "if os.path.exists('transect-sigmoid.exo'):\n",
    "    os.remove('transect-sigmoid.exo')\n",
    "m3.write_exodus('transect-sigmoid.exo')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "a0d42b68-d71c-46fd-9483-742c4fa92dcb",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "App to convert unstructured meshes between formats\n",
      "Contact: Rao Garimella (rao@lanl.gov)\n",
      "\n",
      "Importing mesh from ExodusII file...Building classification information....Done\n",
      "Exporting mesh to ExodusII/NemesisI format...Done\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Now convert the file from \"polyhedral\" to \"fixed format\" and open it in VisIt or Paraview.\n",
    "os.system(\"$AMANZI_TPLS_DIR/bin/meshconvert transect-sigmoid.exo transect-sigmoid_fixed_format.exo\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "346d9e3b-5e89-4b0b-b982-82f57029ac1a",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
