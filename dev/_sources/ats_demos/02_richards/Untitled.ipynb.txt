{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "356d10e7-ba3d-4837-9c26-47d80b28a4a2",
   "metadata": {},
   "outputs": [],
   "source": [
    "import plot_lines\n",
    "import numpy as np\n",
    "from matplotlib import pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "d5076eb0-b475-4567-a6d4-b8cdf7710de9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "\u001b[31mSignature:\u001b[39m\n",
       "plot_lines.plotLines(\n",
       "    x,\n",
       "    y,\n",
       "    t,\n",
       "    ax=\u001b[38;5;28;01mNone\u001b[39;00m,\n",
       "    colorbar=\u001b[38;5;28;01mTrue\u001b[39;00m,\n",
       "    colorbar_ticks=\u001b[38;5;28;01mTrue\u001b[39;00m,\n",
       "    colorbar_label=\u001b[38;5;28;01mNone\u001b[39;00m,\n",
       "    t_min=\u001b[38;5;28;01mNone\u001b[39;00m,\n",
       "    t_max=\u001b[38;5;28;01mNone\u001b[39;00m,\n",
       "    **kwargs,\n",
       ")\n",
       "\u001b[31mDocstring:\u001b[39m Plots lines by color.\n",
       "\u001b[31mFile:\u001b[39m      /Users/Shared/ornldev/code/ats/ats/repos/master/src/physics/ats/tools/utils/plot_lines.py\n",
       "\u001b[31mType:\u001b[39m      function"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plot_lines.plotLines?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "b4865a40-863c-4f4b-bff0-bc3527bd2fe3",
   "metadata": {},
   "outputs": [],
   "source": [
    "xc = np.array([0,1,2,3])\n",
    "y = np.array([[0,0,0,0], [1,1,1,1], [2,2,2,2]])\n",
    "x = np.tile(xc, (3,1))\n",
    "times = np.array([13, 14, 15])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "29f01880-ba8b-4c7d-8424-a5a94fb04e7e",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/Shared/ornldev/code/ats/ats/repos/master/src/physics/ats/tools/utils/plot_lines.py:44: UserWarning: set_ticklabels() should only be used with a fixed number of ticks, i.e. after set_ticks() or using a FixedLocator.\n",
      "  axcb.set_ticklabels(new_ticklabels)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "(<Axes: >, <matplotlib.colorbar.Colorbar at 0x12298b050>)"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots(1,1)\n",
    "plot_lines.plotLines(x, y, times, ax=ax, colorbar_label='my_var', cmap='jet', t_min=times[0], t_max=times[-1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c5755ea9-65e9-436e-9a5d-82c76195a069",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python [conda env:ats]",
   "language": "python",
   "name": "conda-env-ats-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.10"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
