Tightly Coupled MPCs
====================

Coupling is an art, and often requires special off-diagonal work for
globally implicit coupling on a single domain.  For instance, phase
change results in tight coupling of flow and energy equations;
off-block-diagonal entries in the preconditioner are entered through a
special-purpose coupler.

Coupled Cells MPC
-----------------
`src/physics/ats/src/pks/mpc/mpc_coupled_cells.hh <https://github.com/amanzi/ats/blob/master/src/pks/mpc/mpc_coupled_cells.hh>`_


This is a :ref:`Strong MPC` which uses a preconditioner in which the
block-diagonal cell-local matrix is dense.  If the system looks something
like:

.. math::

   A( y_1, y_2, x, t ) = 0
   B( y_1, y_2, x, t ) = 0

where :math:`y_1, y_2` are spatially varying unknowns that are discretized
using the MFD method (and therefore have both cell and face unknowns), an
approximation to the Jacobian is written as

.. math::
   
   \begin{bmatrix}
     \frac{dA^c}{dy_1^c}  & \frac{dA^c}{dy_1^f} & \frac{dA^c}{dy_2^c} & 0                   \\
     \frac{dA^f}{dy_1^c}  & \frac{dA^f}{dy_1^f} & 0                   & 0                   \\
     \frac{dB^c}{dy_1^c}  & 0                   & \frac{dB^c}{dy_2^c} & \frac{dB^c}{dy_2^f} \\
     0                    & 0                   & \frac{dB^f}{dy_2^c} & \frac{dB^f}{dy_2^f}
   \end{bmatrix}


Note that the upper left block is the standard preconditioner for the A system,
and the lower right block is the standard precon for the B system, and we have
simply added cell-based couplings, :math:`\frac{dA^c}{dy_2^c}` and
:math:`\frac{dB^c}{dy_1^c}`.

Most commonly this is used to couple flow and energy equations on the same
mesh.  In the temperature/pressure system, these extra blocks correspond to

.. math::
    \frac{\partial \Theta}{\partial T} \; , \; \frac{\partial E}{\partial p}

`"PK type`" = `"mpc coupled cells`"
    
.. _pk-mpc-coupled-cells-spec:
.. admonition:: pk-mpc-coupled-cells-spec

   * `"domain name`" ``[string]`` Domain of simulation
   * `"conserved quantity A`" ``[string]`` Key of the first sub-PK's conserved quantity.
   * `"conserved quantity B`" ``[string]`` Key of the second sub-PK's conserved quantity.
   * `"primary variable A`" ``[string]`` Key of the first sub-PK's primary variable.
   * `"primary variable B`" ``[string]`` Key of the second sub-PK's primary variable.
   * `"no dA/dy2 block`" ``[bool]`` **false** Excludes the dA^c/dy_2^c block above.
   * `"no dB/dy1 block`" ``[bool]`` **false** Excludes the dB^c/dy1^c block above.

   INCLUDES:

   - ``[strong-mpc-spec]`` *Is a* :ref:`Strong MPC`.




Subsurface Flow & Energy
------------------------
`src/physics/ats/src/pks/mpc/mpc_subsurface.hh <https://github.com/amanzi/ats/blob/master/src/pks/mpc/mpc_subsurface.hh>`_


This MPC provides most nearly all terms for an approximate Jacobian for
coupling three-phase Richards equation (the :ref:`Permafrost Flow PK`) to the
three-phase Energy equation (the :ref:`Three-Phase Energy PK`).

Many options are provided for turning on and off various aspects of this
Jacobian, so it is useful to mathematically write out these terms.  The
equations are:

.. math::
    \frac{\partial \Theta}{\partial t} - \nabla \frac{k_r n_l}{\mu} K ( \nabla p + \rho g \cdot \hat{z} ) &= Q_w \\
    \frac{\partial E}{\partial t} - \nabla \cdot \kappa \nabla T + \nabla \cdot \mathbf{q} e(T) &= Q_w e(T) + Q_e

Note that all of the following are dependent on :math:`p` and/or :math:`T`:

.. math::
    \Theta(p,T), k_r(p,T), n_l(p,T), \mu(T), \rho(p,T), E(p,T), \kappa(p,T), e(T)

Also, both source terms :math:`Q_w` and :math:`Q_e` may or may not depend on :math:`p` and :math:`T`.

Note also that the Darcy flux :math:`\mathbf{q}` used in the advection of energy is given by the Darcy flux:

.. math::
    \mathbf{q} = -\frac{k_r n_l}{\mu} K ( \nabla p + \rho g \cdot \rho g \cdot \hat{z} )

Differentiating these two equations in their two unknowns gives the following four blocks in the approximate Jacobian:

:math:`\frac{\partial F_1}{\partial p}`: this is the Richards equation diagonal block, and is controlled inside that PK.

:math:`\frac{\partial F_1}{\partial T}` includes terms for:

- :math:`\frac{\partial \Theta}{\partial T}` This term is the cell-local diagonal block.

- The partial derivative of the divergence of the Darcy flux with respect to
  temperature is dominated by :math:`\frac{\partial}{\partial T} \frac{k_r
  n_l}{\mu}`.  This is because the relative permeability is strongly
  dependent upon phase change (the freezing equals drying approximation).  This
  term is referred to as the "d div q / dT" term.

:math:`\frac{\partial F_2}{\partial p}` includes terms for:

- :math:`\frac{\partial E}{\partial p}` This term is the cell-local diagonal block.

- The partial derivative of the energy diffusion term with respect to pressure
  is dominated by :math:`\frac{\partial \kappa}{\partial p}` through phase
  change -- at a constant temperature, but changing pressure, phase change can
  result in large changes to thermal conductivity.  This is referred to as the
  "div K grad T / dp" term.

:math:`\frac{\partial F_2}{\partial T}`: this is the energy equation diagonal
block, and is controlled inside that PK.

Also, at this level, where we know more about the flux used in the energy
equation (it is the Darcy flux), we can do a better approximation of the
derivative of the advection of energy term with respect to both temperature and
pressure.  For instance, enthalpy is only weakly dependent on pressure, so we
can use the derivative of the divergence of the Darcy flux with respect to
pressure (from the Richards block) in the advection term in the
:math:`\frac{\partial F_2}{\partial p}` block, and approximate
:math:`\frac{\partial k_r}{\partial T}` in the advection term as well.  These
terms are referred to as "div hq / dp,T terms".  Note the missing initial "d"
here relative to other terms.

The behavior of this MPC's preconditioner can be set by an option,
`"preconditioner type`".  Really users should not change this from the default,
except in expert cases or for comparison's sake, but the options are:

- `"picard`" is the default, this uses all available terms, and enables the
  "suppress" options for finer-grained control.

- `"none`" No preconditioner never works.

- `"block diagonal`" This is what one would get from the default StrongMPC_.
  This probably never works.

- `"no flow coupling`" This keeps the accumulation terms, but turns off all the
  non-local blocks.  This is equivalent to `Coupled Cells MPC`_.

- `"ewc`" **CURRENTLY DISABLED** In addition to the `"picard`" coupling, this
  also *always* does a change of variables, whereby we first invert to
  calculate primary variable corrections, then do a change of variables to
  calculate the linearized corrections in energy and water content space.  We
  then apply those corrections, and invert to find the primary variable changes
  that would have made those corrections.  This is called the "energy and water
  content" algorithm, and is related to similar variable changing approaches by
  Krabbenhoft (for flow) and Knoll (for energy), but in the multivariate
  approach.  This is somewhat bad, becuase while it fixes some corrections, it
  breaks others.

- `"smart ewc`" **CURRENTLY DISABLED** Does the `"ewc`" algorithm above, but
  tries to be smart about when to do it.  This algorithm helps when we are
  about to fall off of the latent heat cliff.  If we can guess when to do it,
  we have a better chance of not breaking things.  This seems like it ought to
  be helpful, but often doesn't do as much as one might hope.


Note this "ewc" algorithm is just as valid, and more useful, in the predictor
(where it is not deprecated/disabled).  There, we extrapolate a change in
pressure and temperature, but often do better to extrapolate in water content
and energy space, then invert (locally) for pressure and temperature
corrections that meet that extrapolation.  Both of these globalization
algorithms are supported by the :ref:`EWC Globalization Delegate` object.

`"PK type`" = `"subsurface permafrost`"

.. _pk-subsurface-permafrost-spec:
.. admonition:: pk-subsurface-permafrost-spec

   * `"domain name`" ``[string]`` Domain of simulation

   * `"preconditioner type`" ``[string]`` **picard** See the above for detailed
     descriptions of the choices.  One of: `"none`", `"block diagonal`", `"no
     flow coupling`", `"picard`", `"ewc`", and `"smart ewc`".

   * `"supress Jacobian terms: div hq / dp,T`" ``[bool]`` **false** If using
     picard or ewc, do not include this block in the preconditioner.
   * `"supress Jacobian terms: d div q / dT`" ``[bool]`` **false** If using
     picard or ewc, do not include this block in the preconditioner.
   * `"supress Jacobian terms: d div K grad T / dp`" ``[bool]`` **false** If
     using picard or ewc, do not include this block in the preconditioner.

   * `"ewc delegate`" ``[mpc-delegate-ewc-spec]`` A :ref:`EWC Globalization
     Delegate` spec.

   INCLUDES:

   - ``[strong-mpc-spec]`` *Is a* :ref:`Strong MPC`.

 


Surface Flow & Energy
---------------------
`src/physics/ats/src/pks/mpc/mpc_surface.hh <https://github.com/amanzi/ats/blob/master/src/pks/mpc/mpc_surface.hh>`_


This MPC provides terms for an approximate Jacobian for coupling the two-phase
diffusion wave equation (the :ref:`Overland Flow with Ice`) to the two-phase
surface energy equation (the :ref:`Overland Energy with Ice`).

`"PK type`" = `"icy surface`"

.. _pk-icy-surface-spec:
.. admonition:: pk-icy-surface-spec

   * `"domain name`" ``[string]`` Domain of simulation

   * `"preconditioner type`" ``[string]`` **picard** See the above for detailed
     descriptions of the choices.  One of: `"none`", `"block diagonal`", `"no
     flow coupling`", `"picard`", `"ewc`", and `"smart ewc`".  Note that the
     `"ewc`" preconditioners are rarely helpful in integrated problems, but may
     be helpful in surface-only problems.

   * `"supress Jacobian terms: d div surface q / dT`" ``[bool]`` **false** Turn
     off the Jacobian term associated with the derivative of overland
     conductivity with respect to temperature.

   * `"surface ewc delegate`" ``[mpc-delegate-ewc-spec]`` A :ref:`EWC Globalization
     Delegate` spec.

   KEYS

   - `"temperature`"
   - `"pressure`"
   - `"energy`"
   - `"water content`"
   - `"overland conductivity`"
   - `"upwind overland conductivity`"
   - `"potential`"
   - `"ponded depth, negative`"
   - `"water flux`"




Reactive Transport
------------------
`src/physics/ats/src/pks/mpc/mpc_reactivetransport.hh <https://github.com/amanzi/ats/blob/master/src/pks/mpc/mpc_reactivetransport.hh>`_


This MPC couples transport and chemistry through an operator split strategy.

Note that transport's primary variable is "mole_ratio", which is in units
of [mol-C mol-H2O^-1].  Chemistry is in "total_component_concentration", which
is in units of [mol-C L^-1].  Therefore, between steps, we convert between the
two.

`"PK type`" = `"reactive transport`"

.. _pk-reactive-transport-spec:
.. admonition:: pk-reactive-transport-spec

   * `"domain name`" ``[string]`` Domain of simulation

   KEYS:

   - `"molar density liquid`"





Flow & Transport
----------------
`src/physics/ats/src/pks/mpc/mpc_flow_transport.hh <https://github.com/amanzi/ats/blob/master/src/pks/mpc/mpc_flow_transport.hh>`_


An MPC that coordinates the coupling of flow and transport, or of integrated
flow an integrated transport.

This MPC simply sets a few default evaluators used in coupling (e.g. alias and
time-interpolated evaluators) based upon the knonw temporal discretizations and
coupling strategies of flow and transport.  Nothing done here couldn't also be
done in the input file by the user, but this shifts some of the burden away
from the user.

Specifically, this sets (as appropriate for surface-only, subsurface-only, or
integrated cases):

- Ensures that flow is not subcycled.
- Transport's flux field is given by flow's water_flux field, and is temporally
  piecewise constant throughout the flow interval using the value at flow's
  NEXT tag.

If transport is subcycled, then this additionally sets that:

- porosity is an ALIASED evaluator pointing to flow's NEXT tag (this likely
  will change, but for now changing it will break tests)
- saturation & molar density are temporally interpolated evaluators between
  flow's CURRENT and NEXT tags.

Note this always assumes that Flow is the _first_ PK in the `"PKs order`" list.

`"PK type`" = `"coupled flow and transport`"

.. _pk-coupled-flow-and-transport-spec:
.. admonition:: pk-coupled-flow-and-transport-spec

  INCLUDES:

  - ``[mpc-subcycled-spec]``



